#define trigPinFront 4
#define echoPinFront 12
#define motorA1 10
#define motorA2 11
#define motorB2 9
#define motorB1 6

#define CLOSE_ANGLE 0      // Angle to open the gripper
#define OPEN_ANGLE 90    // Angle to close the gripper
#define PULSE_PERIOD 20000  // PWM period in microseconds (50Hz)

unsigned long duration;
float distance;
boolean start=false;

// Threshold infrared sensors that based on the calibrated value
#define lineThreshold 800

// Servo pin definition (PWM pin)
#define gripperPin 5

// Initial left and right speed of analog PWM servo motors
byte speedL = 150;
byte speedR = 160;

// Define gripper positions
#define positionRightPulseWidth 2000   // About 2 ms as micro servo 9g - SG90 datasheet
#define positionMiddlePulseWidth 1650  // About 1.5 ms as micro servo 9g - SG90 datasheet
#define positionLeftPulseWidth 950     // About 1 ms as micro servo 9g - SG90 datasheet

// Set analog pins to infrared sensors
int irSensors[] = { A0, A1, A2, A3, A4, A5, A6, A7 };

// Initial infrared values
int irValues[] = { 0, 0, 0, 0, 0, 0, 0, 0 };

// Value to check if robot in line after move left IR
boolean isInLine = false;

void setup() {
  Serial.begin(9600);
  Serial.begin(9600); // Initialize serial communication
  pinMode(trigPinFront, OUTPUT);
  pinMode(echoPinFront, INPUT);
  pinMode(motorB2, OUTPUT);
  pinMode(motorB1, OUTPUT);
  pinMode(motorA1, OUTPUT);
  pinMode(motorA2, OUTPUT);

  // Set servo pin as output
  pinMode(gripperPin, OUTPUT);


  // Initial gripper position

}

void loop() {
  distance = checkDistance(); // Call the function to check distance and store the result
  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.println(" cm");
  if (distance < 30) {
    start=true;
  }
  else{
    start=false;
    }
    if(start==true){
  openGripper();    // Open the gripper
  delay(500);      // Wait for 2 seconds
    countLine(4);
    delay(300);
  
  closeGripper();   // Close the gripper
  delay(500);      // Wait for 2 seconds
  
    moveOutOfSquare();
  
    moveLeftIR();
    delay(200);
  
    straightForward();

    }
  else{
    stopDrive();
    }
  }

  void openGripper() {
  int pulseWidth = map(OPEN_ANGLE, 0, 180, 1000, 2000);  // Convert angle to pulse width
  sendPulse(pulseWidth);  // Send PWM pulse
}

void closeGripper() {
  int pulseWidth = map(CLOSE_ANGLE, 0, 180, 1000, 2000);  // Convert angle to pulse width
  sendPulse(pulseWidth);  // Send PWM pulse
}

void sendPulse(int pulseWidth) {
  unsigned long startTime = micros();  // Get the current time in microseconds

  while (micros() - startTime < PULSE_PERIOD) {  // Send pulse for the duration of the period
    digitalWrite(gripperPin, HIGH);    // Set the pin high
    delayMicroseconds(pulseWidth);     // Wait for the specified pulse width
    digitalWrite(gripperPin, LOW);     // Set the pin low
    delayMicroseconds(PULSE_PERIOD - pulseWidth);  // Wait for the remaining period
  }
}
  float checkDistance() {
    digitalWrite(trigPinFront, LOW);
    delayMicroseconds(2);
    digitalWrite(trigPinFront, HIGH);
    delayMicroseconds(10);
    digitalWrite(trigPinFront, LOW);
    
    duration = pulseIn(echoPinFront, HIGH);
    float distance = (duration / 2.0) * 0.0343; // Ensure float division
    
    return distance; // Return the measured distance
  }

// Functions to control robot move to forward
void moveForward(byte leftSpeedf, byte rightSpeed) {
  analogWrite(motorB2, 0);
  analogWrite(motorB1, rightSpeed);
  analogWrite(motorA1, 0);
  analogWrite(motorA2, leftSpeedf);

  delay(10);
}

// Functions to stop robot
void stopDrive() {
  analogWrite(motorB2, 0);
  analogWrite(motorB1, 0);
  analogWrite(motorA1, 0);
  analogWrite(motorA2, 0);
}

// Functions to control robot move to forward
void moveLeftIR() {
  boolean lineDetected = false;

  analogWrite(motorB2, 0);
  analogWrite(motorB1, 255);
  analogWrite(motorA1, 255);
  analogWrite(motorA2, 0);

  while (!lineDetected) {
    // Read sensor values
    irValues[0] = analogRead(irSensors[0]);
    irValues[1] = analogRead(irSensors[1]);
    irValues[2] = analogRead(irSensors[2]);
    irValues[3] = analogRead(irSensors[3]);
    irValues[4] = analogRead(irSensors[4]);
    irValues[5] = analogRead(irSensors[5]);
    irValues[6] = analogRead(irSensors[6]);
    irValues[7] = analogRead(irSensors[7]);

    if (irValues[3] > lineThreshold || irValues[4] > lineThreshold) {
      lineDetected = true;
    }
  }

  stopDrive();
}

void straightForward() {
  while (true) {
    irValues[0] = analogRead(irSensors[0]);
    irValues[1] = analogRead(irSensors[1]);
    irValues[2] = analogRead(irSensors[2]);
    irValues[3] = analogRead(irSensors[3]);
    irValues[4] = analogRead(irSensors[4]);
    irValues[5] = analogRead(irSensors[5]);
    irValues[6] = analogRead(irSensors[6]);
    irValues[7] = analogRead(irSensors[7]);

    if (irValues[3] < lineThreshold && irValues[4] < lineThreshold) {
      if (!isInLine) {
        moveForward(200, 160);
      } else {
        stopDrive();
        break;
      }
    } else if (irValues[3] > lineThreshold && irValues[4] > lineThreshold) {
      moveForward(150, 160);
      isInLine = true;
    } else if (irValues[3] < lineThreshold && irValues[4] > lineThreshold) {
      moveForward(200, 160);
      isInLine = true;
    } else if (irValues[3] > lineThreshold && irValues[4] < lineThreshold) {
      moveForward(150, 200);
      isInLine = true;
    }
  }
}

// Servo position adjustment function
void setServoPosition(int pulseWidth) {
  // Send PWM pulse to servo
  int i = 1;
  while (i <= 10) {
    digitalWrite(gripperPin, HIGH);
    delayMicroseconds(pulseWidth);
    digitalWrite(gripperPin, LOW);
    i++;
  }
}


// Count black lines and move forward until finished black line counted
void countLine(int target) {
  int lineCount = 0;
  boolean lineDetected = false;

  moveForward(speedL, speedR);

  while (lineCount < target) {
    // Read sensor values
    irValues[0] = analogRead(irSensors[0]);
    irValues[1] = analogRead(irSensors[1]);
    irValues[2] = analogRead(irSensors[2]);
    irValues[3] = analogRead(irSensors[3]);
    irValues[4] = analogRead(irSensors[4]);
    irValues[5] = analogRead(irSensors[5]);
    irValues[6] = analogRead(irSensors[6]);
    irValues[7] = analogRead(irSensors[7]);

    // Toggle between checking for line vs. checking for no line
    if (lineDetected == false) {
      // if all sensors detect a line, increase line count and toggle to checking for no line
      if (irValues[1] > lineThreshold && irValues[2] > lineThreshold && irValues[3] > lineThreshold && irValues[4] > lineThreshold && irValues[5] > lineThreshold && irValues[6] > lineThreshold) {
        lineCount++;
        lineDetected = true;
      }
    } else {
      // if all sensors detect no line, toggle back to checking for line
      if (irValues[1] < lineThreshold && irValues[2] < lineThreshold && irValues[3] < lineThreshold && irValues[4] < lineThreshold && irValues[5] < lineThreshold && irValues[6] < lineThreshold) {
        lineDetected = false;
      }
    }
  }
  stopDrive();
}

void moveOutOfSquare() {
  boolean isOutsideSquare = false;
  moveForward(speedL, speedR);

  while (!isOutsideSquare) {
    // Read sensor values
    irValues[0] = analogRead(irSensors[0]);
    irValues[1] = analogRead(irSensors[1]);
    irValues[2] = analogRead(irSensors[2]);
    irValues[3] = analogRead(irSensors[3]);
    irValues[4] = analogRead(irSensors[4]);
    irValues[5] = analogRead(irSensors[5]);
    irValues[6] = analogRead(irSensors[6]);
    irValues[7] = analogRead(irSensors[7]);

    if (irValues[2] < lineThreshold && irValues[3] < lineThreshold && irValues[4] < lineThreshold) {
      isOutsideSquare = true;
    }
  }
}
