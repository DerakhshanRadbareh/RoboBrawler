#include <Adafruit_NeoPixel.h>

#define frontTrigPin 4
#define frontEchoPin 5

#define PIN 8  // Define the pin where your NeoPixels are connected
#define NUMPIXELS  4

Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);

#define leftTrigPin 4
#define leftEchoPin 5

#define motor1Pin1 11
#define motor1Pin2 10
#define motor2Pin1 6
#define motor2Pin2 9
#define servoPin 7

 long duration, distance;

void setup() {
  Serial.begin(9600);
  pinMode(frontTrigPin, OUTPUT);
  pinMode(frontEchoPin, INPUT);
  pinMode(motor1Pin1, OUTPUT);
  pinMode(motor1Pin2, OUTPUT);
  pinMode(motor2Pin1, OUTPUT);
  pinMode(motor2Pin2, OUTPUT);
  pinMode(servoPin, OUTPUT);

  strip.begin();           // Initialize the NeoPixel strip
  strip.show();

  delay(1000);  // Allow time for servo to initialize
  
}
void loop() {
  
  // Trigger the ultrasonic sensor
  digitalWrite(frontTrigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(frontTrigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(frontTrigPin, LOW);
  duration = pulseIn(frontEchoPin, HIGH);
  distance = (duration / 2) * 0.0343;
  
  Serial.println(distance);
  
  if (distance > 10) {
    // No obstacle in front, move forward
    moveForward();
    Serial.println("Move forward");
  } 
  else {
    // Obstacle detected, stop and check for open areas
    stopMotors();
    Serial.println("Stop");
    checkOpenArea();
 
  }
}

void colorWipe(uint32_t color) {
  for(int i = 0; i < strip.numPixels(); i++) {
    strip.setPixelColor(i, color);
    strip.show();

  }
}


void moveServo(int angle) {
  int pulseWidth = map(angle, 0, 180, 500, 2400);  // Map the angle to the pulse width range

  // Send the PWM signal to the servo
  digitalWrite(servoPin, HIGH);
  delayMicroseconds(pulseWidth);
  digitalWrite(servoPin, LOW);

  // Wait for the servo to reach the position
  delay(1000);
}

void checkOpenArea() {
  // Move the servo to check both sides
  moveServo(180);
  delay(1000);
  // Trigger the ultrasonic sensor
  digitalWrite(frontTrigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(frontTrigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(frontTrigPin, LOW);
  duration = pulseIn(frontEchoPin, HIGH);
  distance = (duration / 2) * 0.0343;
  
  int leftDistance=distance;
  Serial.print("angel:0 ");
  Serial.print("Distance: ");
  Serial.println(distance);
  moveServo(0);
  delay(1000);

  
  // Trigger the ultrasonic sensor
  digitalWrite(frontTrigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(frontTrigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(frontTrigPin, LOW);
  duration = pulseIn(frontEchoPin, HIGH);
  distance = (duration / 2) * 0.0343;
  
  moveServo(90);
  int rightDistance=distance;

  // Decide the direction to turn based on the open area
  if (leftDistance > rightDistance) {
    // Turn left
    turnLeft();
    Serial.println("LEFT");
    Serial.println(distance);
  } else if (leftDistance < rightDistance){
    // Turn right
    Serial.println("RIGHT");
    Serial.println(distance);
    turnRight();
  }

  // Delay for stability and adjust based on the robot's turning speed
  delay(500);

  // Continue moving forward after turning
  moveForward();
}
void moveForward() {
  colorWipe(strip.Color(255, 0, 0));  // green wipe
  analogWrite(motor1Pin1, 200);
  analogWrite(motor1Pin2, 0);
  analogWrite(motor2Pin1, 200);
  analogWrite(motor2Pin2, 0);
}

void stopMotors() {
  colorWipe(strip.Color(0, 255, 0));  // green wipe
  analogWrite(motor1Pin1, 0);
  analogWrite(motor1Pin2, 0);
  analogWrite(motor2Pin1, 0);
  analogWrite(motor2Pin2, 0);
}

void turnLeft() {
  colorWipe(strip.Color(0, 0, 255));  // green wipe
  analogWrite(motor1Pin1, 0);
  analogWrite(motor1Pin2, 0);
  analogWrite(motor2Pin1, 200);
  analogWrite(motor2Pin2, 0);
  delay(300);
}

void turnRight() {
  colorWipe(strip.Color(0, 0, 255));  // green wipe
  analogWrite(motor1Pin1, 200);
  analogWrite(motor1Pin2, 0);
  analogWrite(motor2Pin1, 0);
  analogWrite(motor2Pin2, 0);
  delay(300);
}
